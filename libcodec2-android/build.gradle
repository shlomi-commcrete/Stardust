
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'com.android.library'


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "digital.wup:android-maven-publish:3.6.2"
    }
}


ext{
    ext.buildConfigProperties = new Properties()
    ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.default.properties")))
    System.out.println("file Load " + project.path)
    if(project.file("buildconfig.local.properties").exists()) {
        System.out.println("buildconfig.local.properties Create")
        ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.local.properties")))
    }

    ext.ABI_FILTERS = ext.buildConfigProperties["abi.filters"]

    System.out.println("ABI_FILTERS " + ext.buildConfigProperties["abi.filters"])
    System.out.println("repo.dir " + ext.buildConfigProperties["repo.dir"])
}


android {
    compileSdkVersion 28

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            abiFilters = []
            abiFilters 'arm64-v8a', 'x86_64', 'armeabi-v7a'
        }
    }
    buildTypes {
        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['build/imported-lib']
        }
    }
    packagingOptions {
        pickFirst '**/*.so'
    }

}

// As per: https://github.com/googlesamples/android-ndk/blob/master/hello-libs/app/build.gradle
tasks.whenTaskAdded { task ->
    if (task.name == 'externalNativeBuildRelease') {
        task.dependsOn compileCodec2
    } else if (task.name == 'externalNativeBuildDebug') {
        task.dependsOn compileCodec2
    }
}

task compileCodec2 {
    doFirst {
        System.out.println("android.ndkDirectory : " + android.ndkDirectory)
        project.file("build/codec2_build_linux").mkdirs()
        for(String abi : project.ext.ABI_FILTERS.split(";")) {
            System.out.println("Create abi " + abi)
            project.file("build/codec2_build_android_" + abi).mkdirs()
            project.file("build/imported-lib/"+abi).mkdirs()
        }

    }

    doLast {

        exec {
            workingDir "$projectDir/build/codec2_build_linux"
//            commandLine "/Users/agkinu/Library/Android/sdk/cmake/3.6.4111459/bin/cmake", "$projectDir/src/codec2"
            commandLine "/Users/shlomo/Library/Android/sdk/cmake/3.22.1/bin/cmake", "$projectDir/src/codec2"

        }

        exec {
            workingDir "$projectDir/build/codec2_build_linux"
            commandLine "/usr/bin/make"
        }


        for(String abi : project.ext.ABI_FILTERS.split(";")) {
            System.out.println("Handle abi " + abi)
            exec {
                workingDir "$projectDir/build/codec2_build_android_" + abi
//                commandLine "/Users/agkinu/Library/Android/sdk/cmake/3.6.4111459/bin/cmake", "$projectDir/src/codec2",
                commandLine "/Users/shlomo/Library/Android/sdk/cmake/3.22.1/bin/cmake", "$projectDir/src/codec2",
                        "-DCMAKE_TOOLCHAIN_FILE=" + android.ndkDirectory + "/build/cmake/android.toolchain.cmake",
                        "-DUNITTEST=FALSE",
                        "-DGENERATE_CODEBOOK=$projectDir/build/codec2_build_linux/src/generate_codebook",
                        "-DANDROID_NATIVE_API_LEVEL=23", "-DANDROID_ABI="+abi,
                        "-DANDROID_STL=c++_shared"
            }

            exec {
                workingDir "$projectDir/build/codec2_build_android_" + abi
//                commandLine "/Users/agkinu/Library/Android/sdk/cmake/3.6.4111459/bin/cmake", "--build", "."
                commandLine "/Users/shlomo/Library/Android/sdk/cmake/3.22.1/bin/cmake", "--build", "."
            }

            copy {
                from "$projectDir/build/codec2_build_android_" + abi +"/src/libcodec2.so"
                into "$projectDir/build/imported-lib/"+abi
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:support-annotations:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

publishing {
    publications {
        mavenAar(MavenPublication) {
            from components.android

            groupId rootProject.group
            artifactId project.name
            version "${rootProject.version}"
        }
    }

    repositories {
        //Set this in projectdir/extrasettings.gradle
        maven {
            url rootProject.file(project.ext.buildConfigProperties['repo.dir']).getAbsolutePath()
        }
    }
}
